from nipype.interfaces.base import BaseInterface, TraitedSpec, traits,\
    InputMultiPath, File
import numpy as np
import nibabel as nb
import nipy.neurospin.utils.design_matrix as dm
import nipy.neurospin.glm as GLM

class FitGLMInputSpec(TraitedSpec):
    session_info = traits.Any(exists=True, desc='Session specific information generated by ``modelgen.SpecifyModel``')
    hrf_model = traits.Enum('Canonical', 'Canonical With Derivative', 'FIR', usedefault=True)
    functional_run = File(exists=True, mandatory=True)
    

class FitGLM(BaseInterface):
    input_spec = FitGLMInputSpec
    
    def _run_interface(self, runtime):
        
        session_info = self.inputs.session_info
        
        nscans = len(session_info[0]['scans'])
        hpf = session_info[0]['hpf']
        
        reg_names = []
        for reg in session_info[0]['regress']:
            reg_names.append(reg['name'])
        
        reg_vals = np.zeros((len(reg_names),nscans))
        for i in range(len(reg_names)):
            reg_vals[i,:] = np.array(session_info[0]['regress'][i]['val']).reshape(1,-1)
        
        
        frametimes= np.linspace(0, (nscans-1)*self.inputs.tr, nscans)
        
        conditions = []
        onsets = []
        duration = []
        
        for cond,i in enumerate(session_info[0]['cond']):
            onsets += cond['onset']
            conditions += [i]*len(onsets)
            if len(cond['durations']) == 1:
                duration += cond['durations']*len(onsets)
        
        nii = nb.load(self.inputs.functional_run)
        timeseries = nii.get_data()
        
        paradigm =  dm.BlockParadigm(index=conditions, onset=onsets, duration=duration)
        X, names = dm.dmtx_light(frametimes, paradigm, drift_model='Cosine', hfcut=hpf,
               hrf_model=self.inputs.hrf_model, add_regs=reg_vals,
               add_reg_names=reg_names)
        
        
        
        model = "ar1"
        method = "kalman"
        glm = GLM.glm()
        glm.fit(timeseries.T, X, method=method, model=model)
        
        self._glm = glm


        runtime.returncode = 0
        return runtime