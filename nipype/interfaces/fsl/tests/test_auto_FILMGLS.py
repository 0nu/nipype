# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.fsl.model import FILMGLS
def test_FILMGLS_inputs():
    input_map = dict(ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    output_pwdata=dict(argstr='--outputPWdata',
    ),
    fit_armodel=dict(xor=['autocorr_estimate_only', 'fit_armodel', 'tukey_window', 'multitaper_product', 'use_pava', 'autocorr_noestimate'],
    argstr='--ar',
    ),
    smooth_autocorr=dict(argstr='--sa',
    ),
    results_dir=dict(argstr='--rn=%s',
    usedefault=True,
    ),
    args=dict(argstr='%s',
    ),
    design_file=dict(position=-2,
    argstr='--pd=%s',
    ),
    brightness_threshold=dict(argstr='--epith=%d',
    ),
    mask_size=dict(argstr='--ms=%d',
    ),
    tukey_window=dict(xor=['autocorr_estimate_only', 'fit_armodel', 'tukey_window', 'multitaper_product', 'use_pava', 'autocorr_noestimate'],
    argstr='--tukey=%d',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    multitaper_product=dict(xor=['autocorr_estimate_only', 'fit_armodel', 'tukey_window', 'multitaper_product', 'use_pava', 'autocorr_noestimate'],
    argstr='--mt=%d',
    ),
    autocorr_estimate_only=dict(xor=['autocorr_estimate_only', 'fit_armodel', 'tukey_window', 'multitaper_product', 'use_pava', 'autocorr_noestimate'],
    argstr='--ac',
    ),
    threshold=dict(usedefault=True,
    position=-1,
    argstr='--thr=%f',
    ),
    output_type=dict(),
    autocorr_noestimate=dict(xor=['autocorr_estimate_only', 'fit_armodel', 'tukey_window', 'multitaper_product', 'use_pava', 'autocorr_noestimate'],
    argstr='--noest',
    ),
    full_data=dict(argstr='-v',
    ),
    use_pava=dict(argstr='--pava',
    ),
    in_file=dict(position=-3,
    mandatory=True,
    argstr='--in=%s',
    ),
    )
    inputs = FILMGLS.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value
def test_FILMGLS_outputs():
    output_map = dict(corrections=dict(),
    results_dir=dict(),
    param_estimates=dict(),
    dof_file=dict(),
    logfile=dict(),
    sigmasquareds=dict(),
    residual4d=dict(),
    )
    outputs = FILMGLS.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
